[
  {
    "objectID": "pages/bayes/index.html",
    "href": "pages/bayes/index.html",
    "title": "Bayes and Penguins",
    "section": "",
    "text": "Here is a worksheet and assignment that combines Bayes (brms) with tidyverse tools. The focus is on the essentials when it comes to simple linear regression with brms.\nPlease read and run through this worksheet and answer the conceptual questions that are interleaved within them. At the end of each part, is a coding exercise based on the material you’ve read until then."
  },
  {
    "objectID": "pages/bayes/index.html#packages-and-data",
    "href": "pages/bayes/index.html#packages-and-data",
    "title": "Bayes and Penguins",
    "section": "Packages and data",
    "text": "Packages and data\nLoad the primary packages.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggside)\nlibrary(brms)\nlibrary(broom)\nlibrary(broom.mixed)\n\n\nWe’ll use the penguins data set from the palmerpenguins package.\n\n\nCode\ndata(penguins, package = \"palmerpenguins\")\n\n# Any type of looking at data is a part of EDA \nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nCode\nhead(penguins)\n\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nYou might divide the data set by the three levels of species.\n\n\nCode\npenguins %&gt;% \n  count(species)\n\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\nTo start, we’ll make a subset of the data called chinstrap.\n\n\nCode\nchinstrap &lt;- penguins %&gt;% \n  filter(species == \"Chinstrap\")\n\nglimpse(chinstrap)\n\n\nRows: 68\nColumns: 8\n$ species           &lt;fct&gt; Chinstrap, Chinstrap, Chinstrap, Chinstrap, Chinstra…\n$ island            &lt;fct&gt; Dream, Dream, Dream, Dream, Dream, Dream, Dream, Dre…\n$ bill_length_mm    &lt;dbl&gt; 46.5, 50.0, 51.3, 45.4, 52.7, 45.2, 46.1, 51.3, 46.0…\n$ bill_depth_mm     &lt;dbl&gt; 17.9, 19.5, 19.2, 18.7, 19.8, 17.8, 18.2, 18.2, 18.9…\n$ flipper_length_mm &lt;int&gt; 192, 196, 193, 188, 197, 198, 178, 197, 195, 198, 19…\n$ body_mass_g       &lt;int&gt; 3500, 3900, 3650, 3525, 3725, 3950, 3250, 3750, 4150…\n$ sex               &lt;fct&gt; female, male, male, female, male, female, female, ma…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nWe’ve done from a full data set with \\(N = 344\\) rows, to a subset with \\(n = 68\\) rows. (“$” signs hold LaTex snippets)"
  },
  {
    "objectID": "pages/bayes/index.html#more-exploratory-data-analysis-eda",
    "href": "pages/bayes/index.html#more-exploratory-data-analysis-eda",
    "title": "Bayes and Penguins",
    "section": "More Exploratory data analysis (EDA)",
    "text": "More Exploratory data analysis (EDA)\nOur focal variables will be body_mass_g and bill_length_mm. Here they are in a scatter plot.\n\n\nCode\nchinstrap %&gt;% \n  ggplot(aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE)\n\n\n\n\n\n\n\n\n\nWe can augment the plot with some nice functions from the ggside package.\n\n\nCode\nchinstrap %&gt;% \n  ggplot(aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\n  # from ggside\n  geom_xsidehistogram(bins = 30) +\n  geom_ysidehistogram(bins = 30) +\n  scale_xsidey_continuous(breaks = NULL) +\n  scale_ysidex_continuous(breaks = NULL) +\n  theme(ggside.panel.scale = 0.25)\n\n\n\n\n\n\n\n\n\nIt’s a good idea to get a sense of the sample statistics. Here are the means and SD’s for the two variables.\n\n\nCode\nchinstrap %&gt;% \n  summarise(body_mass_g_mean = mean(body_mass_g),\n            body_mass_g_sd = sd(body_mass_g),\n            bill_length_mm_mean = mean(bill_length_mm),\n            bill_length_mm_sd = sd(bill_length_mm)) \n\n\n# A tibble: 1 × 4\n  body_mass_g_mean body_mass_g_sd bill_length_mm_mean bill_length_mm_sd\n             &lt;dbl&gt;          &lt;dbl&gt;               &lt;dbl&gt;             &lt;dbl&gt;\n1            3733.           384.                48.8              3.34\n\n\nAnd you know that more efficient way to compute sample statistics for multiple variables is to first convert the data into the long format with pivot_longer(). Then you use a group_by() line before the main event in summarise().\n\n\nCode\nchinstrap %&gt;% \n  pivot_longer(cols = c(body_mass_g, bill_length_mm)) %&gt;% \n  group_by(name) %&gt;% \n  summarise(mean = mean(value),\n            sd = sd(value),\n            # count the missing data (if any)\n            n_missing = sum(is.na(value))) \n\n\n# A tibble: 2 × 4\n  name             mean     sd n_missing\n  &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;     &lt;int&gt;\n1 bill_length_mm   48.8   3.34         0\n2 body_mass_g    3733.  384.           0\n\n\n\nQuestion 1.1: What do the marginal histograms added by ggside tell you about the distribution of body_mass_g and bill_length_mm individually?\nThe marginal histograms created by geom_xsidehistogram() and geom_ysidehistogram() from the ggside package show the univariate distribution of each focal variable:\n\nThe x-side histogram displays how body_mass_g values are distributed across the sample.\nThe y-side histogram shows the distribution of bill_length_mm.\n\nThese histograms help us to assess:\n\nShape of the distribution (e.g., normal, skewed, bimodal).\nSpread (range of values and whether it’s wide or narrow).\nCenter (whether the values cluster around the means reported in the summary).\nOutliers or gaps (e.g., isolated bars that indicate extreme or missing clusters)."
  },
  {
    "objectID": "pages/bayes/index.html#ols",
    "href": "pages/bayes/index.html#ols",
    "title": "Bayes and Penguins",
    "section": "OLS",
    "text": "OLS\nWe’ll fit the model\n\\[\n\\begin{align}\n\\text{bill_length_mm}_i & = \\beta_0 + \\beta_1 \\text{body_mass_g}_i + \\epsilon_i \\\\\n\\epsilon_i & \\sim \\operatorname{Normal}(0, \\sigma_\\epsilon)\n\\end{align}\n\\]\nwhere bill_length_mm is the dependent variable or a response variable. The sole predictor is body_mass_g. Both variables have \\(i\\) subscripts, which indicate they vary across the \\(i\\) rows in the data set. For now, you might think if \\(i\\) as standing for “index.” The last term in the first line, \\(\\epsilon\\), is often called the error, or noise term. In the second line, we see we’re making the conventional assumption the “errors” are normally distributed around the regression line.\nAn alternative and equivalent way to write that equation is\n\\[\n\\begin{align}\n\\text{bill_length_mm}_i & \\sim \\operatorname{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i & = \\beta_0 + \\beta_1 \\text{body_mass_g}_i,\n\\end{align}\n\\]\nwhich is meant to convey we are modeling bill_length_mm as normally distributed, with a conditional mean. You don’t tend to see equations written this way in the OLS paradigm. However, this style of notation will serve us better when we start modeling our data with other distributions.\nThis notation grows on you\nFitting the model with the base R lm() function, which uses the OLS algorithm.\n\n\nCode\n# fit\nfit1.ols &lt;- lm(\n  data = chinstrap,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\n# summarize the results\nsummary(fit1.ols)\n\n\n\nCall:\nlm(formula = bill_length_mm ~ 1 + body_mass_g, data = chinstrap)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.8399 -2.2370  0.3247  1.8385  9.3138 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 3.217e+01  3.443e+00   9.344 1.07e-13 ***\nbody_mass_g 4.463e-03  9.176e-04   4.863 7.48e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.887 on 66 degrees of freedom\nMultiple R-squared:  0.2638,    Adjusted R-squared:  0.2527 \nF-statistic: 23.65 on 1 and 66 DF,  p-value: 7.48e-06\n\n\nThe point estimates are in scientific notation. We can pull them with the coef() function.\n\n\nCode\ncoef(fit1.ols)\n\n\n (Intercept)  body_mass_g \n32.174192865  0.004462694 \n\n\nWe can compute fitted values, or predictions, with the predict() function. Here’s the default behavior.\n\n\nCode\npredict(fit1.ols)\n\n\n       1        2        3        4        5        6        7        8 \n47.79362 49.57870 48.46303 47.90519 48.79773 49.80183 46.67795 48.90930 \n       9       10       11       12       13       14       15       16 \n50.69437 48.68616 49.13243 49.02086 48.68616 50.24810 48.12832 50.24810 \n      17       18       19       20       21       22       23       24 \n46.90108 48.68616 47.57049 51.81005 48.23989 47.34735 45.11601 49.13243 \n      25       26       27       28       29       30       31       32 \n46.90108 50.69437 47.34735 49.13243 48.68616 52.47945 46.45481 51.36378 \n      33       34       35       36       37       38       39       40 \n47.12422 50.47124 48.23989 49.57870 49.35556 53.59512 44.22347 52.25632 \n      41       42       43       44       45       46       47       48 \n49.80183 48.46303 48.01676 47.79362 48.57459 52.03318 47.34735 51.36378 \n      49       50       51       52       53       54       55       56 \n46.67795 48.57459 47.01265 49.80183 48.23989 50.24810 47.12422 47.57049 \n      57       58       59       60       61       62       63       64 \n46.67795 50.24810 49.13243 47.90519 49.80183 48.46303 48.46303 50.02497 \n      65       66       67       68 \n47.34735 49.02086 50.47124 49.02086 \n\n\nWe get one prediction, one fitted value, for each case in the data set. We can express the uncertainty around those predictions with confidence intervals.\n\n\nCode\npredict(fit1.ols,\n        interval = \"confidence\") %&gt;% \n  # just the top 6\n  head()\n\n\n       fit      lwr      upr\n1 47.79362 46.97456 48.61268\n2 49.57870 48.81580 50.34160\n3 48.46303 47.74771 49.17834\n4 47.90519 47.10905 48.70133\n5 48.79773 48.09864 49.49682\n6 49.80183 48.99783 50.60584\n\n\nWe might also ask for a standard error for each prediction.\n\n\nCode\npredict(fit1.ols,\n        se.fit = TRUE) %&gt;% \n  data.frame()\n\n\n        fit    se.fit df residual.scale\n1  47.79362 0.4102359 66       2.886728\n2  49.57870 0.3821060 66       2.886728\n3  48.46303 0.3582736 66       2.886728\n4  47.90519 0.3987564 66       2.886728\n5  48.79773 0.3501459 66       2.886728\n6  49.80183 0.4026961 66       2.886728\n7  46.67795 0.5648454 66       2.886728\n8  48.90930 0.3504110 66       2.886728\n9  50.69437 0.5185569 66       2.886728\n10 48.68616 0.3513814 66       2.886728\n11 49.13243 0.3554108 66       2.886728\n12 49.02086 0.3521734 66       2.886728\n13 48.68616 0.3513814 66       2.886728\n14 50.24810 0.4550963 66       2.886728\n15 48.12832 0.3789333 66       2.886728\n16 50.24810 0.4550963 66       2.886728\n17 46.90108 0.5296025 66       2.886728\n18 48.68616 0.3513814 66       2.886728\n19 47.57049 0.4359183 66       2.886728\n20 51.81005 0.7050167 66       2.886728\n21 48.23989 0.3707575 66       2.886728\n22 47.34735 0.4647215 66       2.886728\n23 45.11601 0.8407923 66       2.886728\n24 49.13243 0.3554108 66       2.886728\n25 46.90108 0.5296025 66       2.886728\n26 50.69437 0.5185569 66       2.886728\n27 47.34735 0.4647215 66       2.886728\n28 49.13243 0.3554108 66       2.886728\n29 48.68616 0.3513814 66       2.886728\n30 52.47945 0.8273195 66       2.886728\n31 46.45481 0.6015246 66       2.886728\n32 51.36378 0.6270243 66       2.886728\n33 47.12422 0.4961023 66       2.886728\n34 50.47124 0.4856973 66       2.886728\n35 48.23989 0.3707575 66       2.886728\n36 49.57870 0.3821060 66       2.886728\n37 49.35556 0.3661365 66       2.886728\n38 53.59512 1.0397147 66       2.886728\n39 44.22347 1.0105441 66       2.886728\n40 52.25632 0.7859885 66       2.886728\n41 49.80183 0.4026961 66       2.886728\n42 48.46303 0.3582736 66       2.886728\n43 48.01676 0.3882941 66       2.886728\n44 47.79362 0.4102359 66       2.886728\n45 48.57459 0.3541019 66       2.886728\n46 52.03318 0.7451900 66       2.886728\n47 47.34735 0.4647215 66       2.886728\n48 51.36378 0.6270243 66       2.886728\n49 46.67795 0.5648454 66       2.886728\n50 48.57459 0.3541019 66       2.886728\n51 47.01265 0.5126128 66       2.886728\n52 49.80183 0.4026961 66       2.886728\n53 48.23989 0.3707575 66       2.886728\n54 50.24810 0.4550963 66       2.886728\n55 47.12422 0.4961023 66       2.886728\n56 47.57049 0.4359183 66       2.886728\n57 46.67795 0.5648454 66       2.886728\n58 50.24810 0.4550963 66       2.886728\n59 49.13243 0.3554108 66       2.886728\n60 47.90519 0.3987564 66       2.886728\n61 49.80183 0.4026961 66       2.886728\n62 48.46303 0.3582736 66       2.886728\n63 48.46303 0.3582736 66       2.886728\n64 50.02497 0.4272392 66       2.886728\n65 47.34735 0.4647215 66       2.886728\n66 49.02086 0.3521734 66       2.886728\n67 50.47124 0.4856973 66       2.886728\n68 49.02086 0.3521734 66       2.886728\n\n\nInstead of relying on predictions from the values in the data, we might instead define a sequence of values from the predictor variable. We’ll call those nd.\n\n\nCode\nnd &lt;- tibble(body_mass_g = seq(from = min(chinstrap$body_mass_g),\n                               to = max(chinstrap$body_mass_g),\n                               length.out = 50))\n\nglimpse(nd)\n\n\nRows: 50\nColumns: 1\n$ body_mass_g &lt;dbl&gt; 2700.000, 2742.857, 2785.714, 2828.571, 2871.429, 2914.286…\n\n\nWe can insert our nd data into the newdata argument.\n\n\nCode\npredict(fit1.ols,\n        interval = \"confidence\",\n        newdata = nd) %&gt;% \n  # just the top 6\n  head()\n\n\n       fit      lwr      upr\n1 44.22347 42.20585 46.24108\n2 44.41473 42.47057 46.35888\n3 44.60598 42.73489 46.47708\n4 44.79724 42.99874 46.59574\n5 44.98850 43.26207 46.71493\n6 45.17976 43.52482 46.83469\n\n\nNow we wrangle those predictions a bit and pump the results right into ggplot().\n\n\nCode\npredict(fit1.ols,\n        interval = \"confidence\",\n        newdata = nd) %&gt;% \n  data.frame() %&gt;% \n  bind_cols(nd) %&gt;% \n  \n  ggplot(aes(x = body_mass_g)) +\n  # 95% confidence interval ribbon\n  geom_ribbon(aes(ymin = lwr, ymax = upr),\n              alpha = 1/3) +\n  # point estimate line\n  geom_line(aes(y = fit)) +\n  geom_point(data = chinstrap,\n             aes(y = bill_length_mm))\n\n\n\n\n\n\n\n\n\nIf we wanted to, we could look at the residuals with help from the residuals() function.\n\n\nCode\nresiduals(fit1.ols)\n\n\n         1          2          3          4          5          6          7 \n-1.2936220  0.4213003  2.8369738 -2.5051894  3.9022718 -4.6018344 -0.5779485 \n         8          9         10         11         12         13         14 \n 2.3907044 -4.6943732  2.6138391 -2.5324303  2.6791371 -1.6861609  1.7518962 \n        15         16         17         18         19         20         21 \n-2.2283241  0.2518962  3.3989168  9.3138391 -1.1704873 -2.6100467 -5.8398915 \n        22         23         24         25         26         27         28 \n 1.1526474 -1.9160056  1.4675697 -0.2010832  1.3056268  3.1526474  0.3675697 \n        29         30         31         32         33         34         35 \n-2.2861609  0.3205492 -5.5548138  2.8362227 -4.6242179  0.5287615  1.4601085 \n        36         37         38         39         40         41         42 \n-2.0786997 -1.7555650 -1.5951243  2.6765332  1.2436839 -0.8018344 -2.2630262 \n        43         44         45         46         47         48         49 \n 2.8832432 -2.2936220  2.3254065 -1.2331814  2.7526474 -2.3637773  4.8220515 \n        50         51         52         53         54         55         56 \n 1.2254065  1.0873494  1.5981656 -2.5398915  0.4518962 -4.6242179  4.6295127 \n        57         58         59         60         61         62         63 \n-1.4779485 -0.9481038  1.0675697 -2.3051894  2.0981656 -1.6630262 -2.7630262 \n        64         65         66         67         68 \n 5.7750309 -3.8473526  0.5791371  0.3287615  1.1791371 \n\n\nHere we might put them in a tibble and display them in a plot.\n\n\nCode\n# put them in a tibble\ntibble(r = residuals(fit1.ols)) %&gt;% \n  # plot!\n  ggplot(aes(x = r)) +\n  geom_histogram(binwidth = 1)\n\n\n\n\n\n\n\n\n\n\nQuestion 1.2: Can you predict what the mean value, and standard deviations will be? Why? Calculate it. Compare this against outputs in summary(fit1.ols) and explain. Map the values you find to the latex equations before.\n\n\n—\n\nThe mean of the residuals will be zero (or very close to it, due to rounding).\nThe standard deviation of the residuals should be around 2.887, which matches the residual standard error in the summary output.\n\nWe can predict both of these values before even calculating them, based on how OLS works.\n\n\n—\n\n\nWhy?\nOLS (Ordinary Least Squares) does a few things by design:\n\nIt finds the line that minimizes the sum of squared residuals.\nAs a result, it forces the mean of the residuals to be exactly zero.\nThe spread of those residuals — i.e., how far they vary from the fitted values — is captured by the residual standard error.\n\nSo the output of summary(fit1.ols) already tells us what to expect:\nResidual standard error: 2.887 on 66 degrees of freedom\n\n\n\nCode: Calculate mean and SD of residuals\n\n\nCode\n# Get the residuals\nres &lt;- residuals(fit1.ols)\n\n# Mean should be ~0\nmean(res)\n\n\n[1] 1.600027e-16\n\n\nCode\n# Standard deviation should be ~2.887\nsd(res)\n\n\n[1] 2.865104\n\n\nHere’s the model we fit:\n\\begin{align} \\text{bill_length_mm}_i &= \\beta_0 + \\beta_1 \\cdot \\text{body_mass_g}_i + \\epsilon_i \\\\\\ \\epsilon_i &\\sim \\text{Normal}(0, \\sigma_\\epsilon) \\end{align}\nSo we model each penguin’s bill length as a linear function of its body mass, with some error ($\\epsilon_i$). That error term is supposed to be normally distributed around zero, with standard deviation $\\sigma_\\epsilon$.\nFrom our calculations:\n\nMean of residuals = 0 → ✔️ matches the assumption $\\epsilon_i \\sim \\text{Normal}(0, \\dots)$\nSD of residuals ≈ 2.887 → ✔️ this is our estimate of $\\sigma_\\epsilon$\n\nSo yes, it all lines up nicely with the math."
  },
  {
    "objectID": "pages/bayes/index.html#bayes-with-default-settings",
    "href": "pages/bayes/index.html#bayes-with-default-settings",
    "title": "Bayes and Penguins",
    "section": "Bayes with default settings",
    "text": "Bayes with default settings\nWe’ll be fitting our Bayesian models with the brms package. The primary function is brm().\nbrm() can work a lot like the OLS-based lm() function. For example, here’s how to fit a Bayesian version of our OLS model fit1.ols.\n\n\nCode\nfit1.b &lt;- brm(\n  data = chinstrap,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\n\nNotice what’s happening in the console, below. We’ll get into the details of what just happened later. For now, appreciate we just fit our first Bayesian model, and it wasn’t all that hard.\nSummarize the model.\n\n\nCode\nsummary(fit1.b)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bill_length_mm ~ 1 + body_mass_g \n   Data: chinstrap (Number of observations: 68) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept      32.19      3.57    25.21    39.23 1.00     4993     2775\nbody_mass_g     0.00      0.00     0.00     0.01 1.00     5101     2925\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     2.92      0.25     2.49     3.46 1.00     1812     1920\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\n\nQuestion 1.3: Contrast the language of in the brm() output from the in the lm() output. Ignore ‘Rhat,’ ‘Bulk_ESS,’ and ‘Tail_ESS’ for now.\nFit a frequentist linear model using lm()\n\n\nCode\nfit1.ols &lt;- lm( \n    data = chinstrap, \n    bill_length_mm ~ 1 + body_mass_g )\n\n\nFit a Bayesian model using brm() with default priors\n\n\nCode\nfit1.b &lt;- brm( data = chinstrap, \n              bill_length_mm ~ 1 + body_mass_g, refresh = 0 )\n\n\nSummarization\nsummary(fit1.ols) # lm() gives point estimates, standard errors, t-values, and p-values. # It assumes residuals are normally distributed and focuses on significance.\nsummary(fit1.b) # brm() gives posterior means (Estimate), posterior standard deviations (Est.Error), # and 95% credible intervals (l-95% CI, u-95% CI). No p-values are shown. # The model also estimates sigma as a parameter with uncertainty.\nInterpretation:\n\nlm() tells you whether an effect is “significant” by comparing it to 0\nbrm() tells you what values the coefficient likely takes, based on the posterior\nsigma in lm() is a point estimate (residual standard error), in brm() it’s a parameter with a distribution and credible interval.\n\nIn short:\n\nlm(): inference via null hypothesis testing\nbrm(): inference via probability distributions over parameters\n\n\n\nWhat’s different in how brm() talks about things?\nThe brm() output is more focused on distributions and uncertainty than lm(). It’s less about testing a single value and more about describing what range of values are plausible given the data.\nWe can get a quick and dirty plot of the fitted line with the conditional_effects() function.\n\n\nCode\nconditional_effects(fit1.b)\n\n\n\n\n\n\n\n\n\nCode\n# %&gt;% \n#   plot(points = TRUE)"
  },
  {
    "objectID": "pages/bayes/index.html#coefficients-and-coefficient-plots",
    "href": "pages/bayes/index.html#coefficients-and-coefficient-plots",
    "title": "Bayes and Penguins",
    "section": "Coefficients and coefficient plots",
    "text": "Coefficients and coefficient plots\nWe might want to compare the coefficient summaries from the OLS model to those from the Bayesian model. Here’s the frequentist summary:\n\n\nCode\ncbind(coef(fit1.ols),              # point estimates\n      sqrt(diag(vcov(fit1.ols))),  # standard errors\n      confint(fit1.ols))           # 95% CIs\n\n\n                                             2.5 %       97.5 %\n(Intercept) 32.174192865 3.4433622902 25.299298235 39.049087495\nbody_mass_g  0.004462694 0.0009176106  0.002630625  0.006294763\n\n\nWe can compute a focused summary of the Bayesian model with the fixef() function.\n\n\nCode\nfixef(fit1.b)\n\n\n                Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.208875451 3.5034661107 25.299619059 39.117082452\nbody_mass_g  0.004458494 0.0009335195  0.002604986  0.006302437\n\n\nIn this case, the results are very similar.\nWe can also pull this information from our OLS model with the broom::tidy() function.\n\n\nCode\ntidy(fit1.ols, conf.int = TRUE)\n\n\n# A tibble: 2 × 7\n  term        estimate std.error statistic  p.value conf.low conf.high\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept) 32.2      3.44          9.34 1.07e-13 25.3      39.0    \n2 body_mass_g  0.00446  0.000918      4.86 7.48e- 6  0.00263   0.00629\n\n\nIf you would like to use the tidy() function with your brms models, it will have to be the version of tidy() from the broom.mixed package.\n\n\nCode\ntidy(fit1.b)\n\n\n# A tibble: 3 × 8\n  effect   component group    term         estimate std.error conf.low conf.high\n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 fixed    cond      &lt;NA&gt;     (Intercept)  32.2      3.50     25.3      39.1    \n2 fixed    cond      &lt;NA&gt;     body_mass_g   0.00446  0.000934  0.00260   0.00630\n3 ran_pars cond      Residual sd__Observa…  2.93     0.262     2.48      3.50   \n\n\nHere’s how to wrangle and combine these two results into a single data frame. Then we’ll make a coefficient plot.\n\n\nCode\nbind_rows(\n  tidy(fit1.ols, conf.int = TRUE) %&gt;% select(term, estimate, contains(\"conf\")),\n  tidy(fit1.b) %&gt;% select(term, estimate, contains(\"conf\")) %&gt;% filter(term != \"sd__Observation\")\n) %&gt;% \n  mutate(method = rep(c(\"lm()\", \"brm()\"), each = 2)) %&gt;% \n  \n  ggplot(aes(x = estimate, xmin = conf.low, xmax = conf.high, y = method)) +\n  geom_pointrange() +\n  scale_x_continuous(\"parameter space\", expand = expansion(mult = 0.2)) +\n  scale_y_discrete(expand = expansion(mult = 5)) +\n  facet_wrap(~ term, scales = \"free_x\")\n\n\n\n\n\n\n\n\n\nAt a superficial level for simple conventional regression type models, the results from a Bayesian brm() model will be very similar to those from an OLS lm() model. This will not always be case, and even in this example there are many differences once we look below the surface."
  },
  {
    "objectID": "pages/bayes/index.html#more-questionsexercise",
    "href": "pages/bayes/index.html#more-questionsexercise",
    "title": "Bayes and Penguins",
    "section": "More Questions/Exercise",
    "text": "More Questions/Exercise\nGo back to the full penguins data set. This time, make a subset of the data called gentoo, which is only the cases for which species == \"Gentoo\".\nCan you fit the same OLS model to these data?\nHow about plotting the results with predict()?\nCan you fit the same default Bayesian brm() model to these data?\nHow about plotting the results with conditional_effects()?\nCan you make a coefficient plot comparing the new OLS and Bayesian beta coefficients?"
  },
  {
    "objectID": "pages/bayes/index.html#plot-ols-predictions",
    "href": "pages/bayes/index.html#plot-ols-predictions",
    "title": "Bayes and Penguins",
    "section": "Plot OLS predictions",
    "text": "Plot OLS predictions\nCreate new data for predictions\n\n\nCode\nnd &lt;- tibble(body_mass_g = seq(min(gentoo$body_mass_g), max(gentoo$body_mass_g), length.out = 50))\n\n\nPredict with confidence intervals\n\n\nCode\npred_ols &lt;- predict(fit_ols_gentoo, newdata = nd, interval = \"confidence\") %&gt;% as_tibble() %&gt;% bind_cols(nd)\n\n\nPlot\n\n\nCode\nggplot() +\n  geom_point(data = gentoo, aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_ribbon(data = pred_ols, aes(x = body_mass_g, ymin = lwr, ymax = upr), fill = \"skyblue\", alpha = 0.3) +\n  geom_line(data = pred_ols, aes(x = body_mass_g, y = fit), color = \"blue\") +\n  labs(title = \"OLS Predictions for Gentoo Penguins\")\n\n\n\n\n\n\n\n\n\n\nFit Bayesian model for Gentoo\n\n\nCode\nfit_bayes_gentoo &lt;- brm(\n  data = gentoo,\n  bill_length_mm ~ body_mass_g,\n  refresh = 0\n)\nsummary(fit_bayes_gentoo)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bill_length_mm ~ body_mass_g \n   Data: gentoo (Number of observations: 123) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept      26.73      2.13    22.46    30.91 1.00     4031     2692\nbody_mass_g     0.00      0.00     0.00     0.00 1.00     4123     2447\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     2.32      0.15     2.05     2.65 1.00     1733     1500\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nPlot Bayesian conditional effects\n\n\nCode\nconditional_effects(fit_bayes_gentoo)\n\n\n\n\n\n\n\n\n\nCoefficient plot comparing OLS and Bayesian estimates\nExtract tidy coefficient summaries\n\n\nCode\nols_coef &lt;- tidy(fit_ols_gentoo) %&gt;%\n  mutate(model = \"OLS\")\n\nbayes_coef &lt;- tidy(fit_bayes_gentoo, effects = \"fixed\") %&gt;%\n  mutate(model = \"Bayesian\") %&gt;%\n  rename(estimate = estimate, std.error = std.error)\n\n\nCombine and plot\n\n\nCode\nbind_rows(ols_coef, bayes_coef) %&gt;%\n  filter(term == \"body_mass_g\") %&gt;%\n  ggplot(aes(x = model, y = estimate, ymin = estimate - std.error, ymax = estimate + std.error)) +\n  geom_pointrange() +\n  labs(title = \"Comparison of Beta Coefficients (Gentoo)\",\n       y = \"Estimate (±1 SE)\", x = \"Model\")"
  },
  {
    "objectID": "pages/bayes/index.html#exploring-model-results",
    "href": "pages/bayes/index.html#exploring-model-results",
    "title": "Bayes and Penguins",
    "section": "Exploring model results",
    "text": "Exploring model results\nWe can extract the posterior draws from our Bayesian models with the as_draws_df() function.\n\n\nCode\nas_draws_df(fit1.b)\n\n\n# A draws_df: 1000 iterations, 4 chains, and 6 variables\n   b_Intercept b_body_mass_g sigma Intercept lprior lp__\n1           31        0.0051   2.7        49   -4.2 -173\n2           33        0.0044   2.6        49   -4.2 -172\n3           35        0.0038   2.5        49   -4.2 -173\n4           33        0.0044   2.5        49   -4.2 -172\n5           35        0.0038   2.5        49   -4.2 -173\n6           34        0.0040   3.5        49   -4.4 -174\n7           33        0.0043   3.2        49   -4.4 -172\n8           29        0.0050   3.2        48   -4.4 -174\n9           30        0.0050   2.5        49   -4.2 -172\n10          36        0.0035   2.6        49   -4.2 -172\n# ... with 3990 more draws\n# ... hidden reserved variables {'.chain', '.iteration', '.draw'}\n\n\nNote the meta data. We can get a sense of the full posterior distributions of the \\(\\beta\\) parameters with plots.\n\n\nCode\n# wrangle\nas_draws_df(fit1.b) %&gt;% \n  pivot_longer(starts_with(\"b_\")) %&gt;% \n  \n  # plot!\n  ggplot(aes(x = value)) + \n  # geom_density(fill = \"grey20\") +\n  geom_histogram(bins = 40) +\n  facet_wrap(~ name, scales = \"free\")\n\n\n\n\n\n\n\n\n\nWe might summarize those posterior distributions with basic descriptive statistics, like their means, SD’s, and inner 95-percentile range.\n\n\nCode\nas_draws_df(fit1.b) %&gt;% \n  pivot_longer(starts_with(\"b_\")) %&gt;% \n  group_by(name) %&gt;% \n  summarise(mean = mean(value),\n            sd = sd(value),\n            ll = quantile(value, probs = 0.025),\n            ul = quantile(value, probs = 0.975))\n\n\n# A tibble: 2 × 5\n  name              mean       sd       ll       ul\n  &lt;chr&gt;            &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 b_Intercept   32.2     3.50     25.3     39.1    \n2 b_body_mass_g  0.00446 0.000934  0.00260  0.00630\n\n\nNotice how these values match up exactly with those from fixef().\n\n\nCode\nfixef(fit1.b)\n\n\n                Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.208875451 3.5034661107 25.299619059 39.117082452\nbody_mass_g  0.004458494 0.0009335195  0.002604986  0.006302437\n\n\nThus,\n\nThe Bayesian posterior mean is analogous to the frequentist point estimate.\nThe Bayesian posterior SD is analogous to the frequentist standard error.\nThe Bayesian posterior percentile-based 95% (credible) interval is analogous to the frequentist 95% confidence interval.\n\nThese are not exactly the same, mind you. But they serve similar functions.\nWe can also get a sense of these distributions with the plot() function.\n\n\nCode\nplot(fit1.b)\n\n\n\n\n\n\n\n\n\nIgnore the trace plots on the right for a moment. And let’s consider the pairs() plot.\n\n\nCode\npairs(fit1.b)\n\n\n\n\n\n\n\n\n\nCode\n# we can adjust some of the settings with the off_diag_args argument\npairs(fit1.b, off_diag_args = list(size = 1/4, alpha = 1/4))\n\n\n\n\n\n\n\n\n\n\nQuestion 2.1 : In the parlance of Probability, do you know what is the term by which the distributions in the diagonal of the above plot are known as? And the distributions in the off-diagonal?\n\n\nDistributions on the diagonal\nThese are marginal distributions.\n\nThey show the distribution of individual parameters, integrating (or marginalizing) over all other parameters.\nFor example, the diagonal for b_body_mass_g shows the posterior distribution of the slope ignoring the intercept and all other parameters.\n\nDistributions on the off-diagonal\nThese are joint distributions.\n\nThey show the joint posterior between two parameters — how they co-vary.\nFor example, a slanted cloud would imply that when the intercept is higher, the slope tends to be lower (or vice versa).\n\nNotice how the two \\(\\beta\\) parameters seem to have a strong negative correlation. We can quantify that correlation with the vcov() function.\n\n\nCode\nvcov(fit1.b)                      # variance/covariance metric\n\n\n               Intercept   body_mass_g\nIntercept   12.274274789 -3.254609e-03\nbody_mass_g -0.003254609  8.714586e-07\n\n\nCode\nvcov(fit1.b, correlation = TRUE)  # correlation metric\n\n\n             Intercept body_mass_g\nIntercept    1.0000000  -0.9951248\nbody_mass_g -0.9951248   1.0000000\n\n\nThis correlation/covariance among the parameters is not unique to Bayesian models. Here’s the vcov() output for the OLS model.\n\n\nCode\nvcov(fit1.ols)  # variance/covariance metric\n\n\n             (Intercept)   body_mass_g\n(Intercept) 11.856743861 -3.143295e-03\nbody_mass_g -0.003143295  8.420092e-07\n\n\nI’m not aware of an easy way to get that output in a correlation metric for our OLS model. Here’s how to compute the correlation by hand.\n\n\nCode\ncov_xy &lt;- vcov(fit1.ols)[2, 1]  # covariance between the intercept and slope\nvar_x  &lt;- vcov(fit1.ols)[1, 1]  # variance for the intercept\nvar_y  &lt;- vcov(fit1.ols)[2, 2]  # variance for the slope\n\n# convert the covariance into a correlation\ncov_xy / (sqrt(var_x) * sqrt(var_y))\n\n\n[1] -0.9948188\n\n\nThat code follows the definition of a covariance, which can be expressed as\n\\[\n\\text{Cov}(x, y) = \\rho \\sigma_x \\sigma_y,\n\\]\nwhere \\(\\sigma_x\\) is the standard deviation for x, \\(\\sigma_y\\) is the standard deviation for y, and \\(\\rho\\) is their correlation. And thus, you can convert a covariance into a correlation with the formula\n\\[\n\\rho = \\frac{\\sigma_{xy}}{\\sigma_x \\sigma_y},\n\\]\nwhere \\(\\sigma_{xy}\\) is the covariance of x and y."
  },
  {
    "objectID": "pages/bayes/index.html#draws",
    "href": "pages/bayes/index.html#draws",
    "title": "Bayes and Penguins",
    "section": "Draws",
    "text": "Draws\nLet’s save the as_draws_df() output for our model as an object called draws.\n\n\nCode\ndraws &lt;- as_draws_df(fit1.b)\nglimpse(draws)\n\n\nRows: 4,000\nColumns: 9\n$ b_Intercept   &lt;dbl&gt; 30.60659, 32.80956, 35.14606, 32.82047, 34.84944, 34.134…\n$ b_body_mass_g &lt;dbl&gt; 0.005054460, 0.004369258, 0.003775224, 0.004355861, 0.00…\n$ sigma         &lt;dbl&gt; 2.657725, 2.560867, 2.506662, 2.504239, 2.468613, 3.4674…\n$ Intercept     &lt;dbl&gt; 49.47533, 49.12039, 49.23931, 49.08128, 49.18026, 49.241…\n$ lprior        &lt;dbl&gt; -4.204394, -4.189637, -4.173603, -4.178571, -4.166962, -…\n$ lp__          &lt;dbl&gt; -173.3409, -172.0455, -173.2588, -172.3628, -173.3106, -…\n$ .chain        &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ .iteration    &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ .draw         &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n\n\nFor each parameter in the model, we have 4,000 draws from the posterior.\n\nQuestion 2.2: How does this concept relate to representing uncertainty? Can you anticipate how predictions are made based upon these 4000 draws and the linear regression formula?\n\\[\\widehat{\\text{bill_length_mm}}_i = \\beta_0 + \\beta_1 \\text{body_mass_g}_i.\\]\nLet’s break the 4000 draws down with our draws object.\n\n\nCode\n# adjust the parameter names \ndraws &lt;- draws %&gt;% \n  mutate(beta0 = b_Intercept,\n         beta1 = b_body_mass_g)\n\n# Note: go through this one line at a time\ndraws %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  mutate(body_mass_g = mean(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = y_hat)) +\n  geom_histogram(bins = 40) +\n  labs(title = \"Bayesians have posterior distributions\",\n       x = expression(hat(italic(y))*'|'*italic(x)==3733.1)) +\n  coord_cartesian(xlim = c(47, 51))\n\n\n\n\n\n\n\n\n\nHere’s what that is for the OLS model.\n\n\nCode\npredict(fit1.ols,\n        newdata = tibble(body_mass_g = mean(chinstrap$body_mass_g)),\n        interval = \"confidence\") %&gt;% \n  data.frame() %&gt;% \n  \n  ggplot(aes(x = fit, xmin = lwr, xmax = upr, y = 0)) +\n  geom_pointrange() +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(title = \"Frequentists have point estmates and 95% CI's\",\n       x = expression(hat(italic(y))*'|'*italic(x)==3733.1)) +\n  coord_cartesian(xlim = c(47, 51))\n\n\n\n\n\n\n\n\n\nAnother handy way to present a Bayesian posterior is as a density with a point-interval summary below.\n\n\nCode\nlibrary(ggdist) #for stat_half_eye and mean_qi\ndraws %&gt;% \n  mutate(body_mass_g = mean(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = y_hat)) +\n  stat_halfeye(point_interval = mean_qi, .width = .95) +\n  # scale_y_continuous(NULL, breaks = NULL) +\n  labs(title = \"Bayesians have posterior distributions\",\n       x = expression(hat(italic(y))*'|'*italic(x)==3733.1)) +\n  coord_cartesian(xlim = c(47, 51))\n\n\n\n\n\n\n\n\n\nThe dot at the base of the plot is the posterior mean, and the horizontal line marks the 95% percentile-based interval. If you’d like to mark the median instead, set point_interval = median_qi. If you’re like a different kind of horizontal interval, adjust the .width argument.\n\n\nCode\ndraws %&gt;% \n  mutate(body_mass_g = mean(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = y_hat)) +\n  # note the changes to this line\n  stat_halfeye(point_interval = median_qi, .width = c(.5, .99)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(title = \"Bayesians have posterior distributions\",\n       subtitle = \"The dot marks the median.\\nThe thicker line marks the 50% interval, and\\nthe thinner line marks the 99% interval.\",\n       x = expression(hat(italic(y))*'|'*italic(x)==3733.1)) +\n  coord_cartesian(xlim = c(47, 51))"
  },
  {
    "objectID": "pages/bayes/index.html#about-those-means-sds-and-intervals.",
    "href": "pages/bayes/index.html#about-those-means-sds-and-intervals.",
    "title": "Bayes and Penguins",
    "section": "About those means, SD’s, and intervals.",
    "text": "About those means, SD’s, and intervals.\nYou can describe a Bayesian posterior in a lot of different ways. Earlier we said the posterior mean is the Bayesian point estimate. This isn’t strictly true. Means are very popular, but you can summarize a posterior by its mean, median, or mode.\nLet’s see what this looks like in practice. First, we compute and save our statistics for each of our model parameters.\n\n\nCode\npoints &lt;- draws %&gt;% \n  rename(`beta[0]` = beta0,\n         `beta[1]` = beta1) %&gt;% \n  pivot_longer(cols = c(`beta[0]`, `beta[1]`, sigma), \n               names_to = \"parameter\") %&gt;% \n  group_by(parameter) %&gt;% \n  summarise(mean = mean(value),\n            median = median(value),\n            mode = Mode(value)) %&gt;% \n  pivot_longer(starts_with(\"m\"), names_to = \"statistic\")\n\n# what?\npoints\n\n\n# A tibble: 9 × 3\n  parameter statistic    value\n  &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n1 beta[0]   mean      32.2    \n2 beta[0]   median    32.3    \n3 beta[0]   mode      32.9    \n4 beta[1]   mean       0.00446\n5 beta[1]   median     0.00445\n6 beta[1]   mode       0.00425\n7 sigma     mean       2.93   \n8 sigma     median     2.91   \n9 sigma     mode       2.93   \n\n\nNow plot.\n\n\nCode\ndraws %&gt;% \n  rename(`beta[0]` = beta0,\n         `beta[1]` = beta1) %&gt;% \n  pivot_longer(cols = c(`beta[0]`, `beta[1]`, sigma), \n               names_to = \"parameter\") %&gt;% \n  \n  ggplot(aes(x = value)) +\n  geom_density() +\n  geom_vline(data = points,\n             aes(xintercept = value, color = statistic),\n             size = 3/4) +\n  scale_color_viridis_d(option = \"A\", end = .8) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  xlab(\"parameter space\") +\n  facet_wrap(~ parameter, labeller = label_parsed, scales = \"free\", ncol = 1) +\n  theme(strip.text = element_text(size = 14))\n\n\n\n\n\n\n\n\n\n\nQuestion 2.3: Discuss the skew in \\(\\sigma\\).Why it might arise, etc.?\n\nThe mean is the brms default summary, and McElreath (2015, 2020) defaulted to the mean in his texts.\nThe median is also available for many brms functions, and it’s what Gelman et al (2020) recommend.\nThe mode can be attractive for very skewed distributions, and it’s what Kruschke (2015) used in his text.\n\nWith many brms functions, you can request the median by setting robust = TRUE. For example:\n\n\nCode\nfixef(fit1.b)                 # means\n\n\n                Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.208875451 3.5034661107 25.299619059 39.117082452\nbody_mass_g  0.004458494 0.0009335195  0.002604986  0.006302437\n\n\nCode\nfixef(fit1.b, robust = TRUE)  # medians\n\n\n                Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.252400005 3.4024239536 25.299619059 39.117082452\nbody_mass_g  0.004449546 0.0009023721  0.002604986  0.006302437\n\n\n\n\nQuestion 2.4: Given the skew in sigma and what you know about summary statistics, what might be the implication of using just the mean, median, or mode of posteriors to make a prediction?\n\nSD’s and MAD SD’s.\nEarlier we said the posterior SD is the Bayesian standard error. This isn’t strictly true. You can also use the median absolute deviation (MAD SD). If we let \\(M\\) stand for the median of some variable \\(y\\), which varies across \\(i\\) cases, we can define the MAD SD as\n\\[\\textit{MAD SD} = 1.4826 \\times \\operatorname{median}_{i = 1}^n |y_i - M|,\\]\nwhere \\(1.4826\\) is a constant that scales the MAD SD into a standard-deviation metric. Here’s what this looks like in practice.\n\n\nCode\n# go through this line by line\ndraws %&gt;% \n  select(beta0) %&gt;% \n  mutate(mdn = median(beta0)) %&gt;% \n  mutate(`|yi - mdn|` = abs(beta0 - mdn)) %&gt;% \n  summarise(MAD_SD = 1.4826 * median(`|yi - mdn|`))\n\n\n# A tibble: 1 × 1\n  MAD_SD\n   &lt;dbl&gt;\n1   3.40\n\n\nBase R also has a mad() function.\n\n\nCode\n?mad\n\n\nHelp on topic 'mad' was found in the following packages:\n\n  Package               Library\n  posterior             /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library\n  stats                 /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library\n\n\nUsing the first match ...\n\n\nCode\ndraws %&gt;% \n  summarise(MAD_SD = mad(beta0))\n\n\n# A tibble: 1 × 1\n  MAD_SD\n   &lt;dbl&gt;\n1   3.40\n\n\nYou can request the MAD SD from many brms functions by setting robust = TRUE.\n\n\nCode\nfixef(fit1.b)                 # SD\n\n\n                Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.208875451 3.5034661107 25.299619059 39.117082452\nbody_mass_g  0.004458494 0.0009335195  0.002604986  0.006302437\n\n\nCode\nfixef(fit1.b, robust = TRUE)  # MAD SD\n\n\n                Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.252400005 3.4024239536 25.299619059 39.117082452\nbody_mass_g  0.004449546 0.0009023721  0.002604986  0.006302437\n\n\n\nTo my eye, many authors (e.g., Kruschke, McElreath) just use the SD.\nGelman et al (see Section 5.3) recommend the MAD SD.\n\n\n\nBayesian intervals.\nBayesians describe the widths of their posteriors with intervals. I’ve seen these variously described as confidence intervals, credible intervals, probability intervals, and even uncertainty intervals. My recommendation is just pick a term, and clearly tell your audience what you mean (e.g., at the end of a Method section in a journal article).\nTo my eye, the most popular interval is a 95% percentile-based interval. 95% is conventional, perhaps due to the popularity of the 95% frequentist confidence interval, which is related to the 0.05 alpha level used for the conventional \\(p\\)-value cutoff. However, you can use other percentiles. Some common alternatives are 99%, 89%, 80%, and 50%.\nAlso, Bayesian intervals aren’t always percentile based. An alternative is the highest posterior density interval (HPDI), which has mathematical properties some find desirable.\nbrms only supports percentile-based intervals, but it does allow for a variety of different ranges via the prob argument. For example, here’s how to request 80% intervals in summary().\n\n\nCode\nsummary(fit1.b, prob = .80)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bill_length_mm ~ 1 + body_mass_g \n   Data: chinstrap (Number of observations: 68) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n            Estimate Est.Error l-80% CI u-80% CI Rhat Bulk_ESS Tail_ESS\nIntercept      32.21      3.50    27.87    36.70 1.00     4897     2940\nbody_mass_g     0.00      0.00     0.00     0.01 1.00     4965     2924\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-80% CI u-80% CI Rhat Bulk_ESS Tail_ESS\nsigma     2.93      0.26     2.61     3.26 1.00     2058     1873\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nRegarding interval widths:\n\n95% Intervals are widely used.\nMcElreat likes 89% intervals, and uses them as a default in his rethinking package.\nSome of the bayesplot, ggdist, and tidybayes functions return 80% intervals.\nSome of the ggdist, and tidybayes functions return 66% or 50% intervals.\nI’ve heard Gelman report his fondness for 50% intervals on his blog (https://statmodeling.stat.columbia.edu/2016/11/05/why-i-prefer-50-to-95-intervals/).\n\nRegarding interval types:\n\nPercentile-based intervals are widely used in the Stan ecosystem, and are supported in texts like Gelman et al.\nKruschke has consistently advocates for HPDI’s in his articles, and in his text.\n\n\n\n\nPosterior summaries with tidybayes.\nMatthew Kay’s tidybayes package (https://mjskay.github.io/tidybayes/) offers an array of convenience functions for summarizing posterior distributions with points and intervals. See the Point summaries and intervals section of Kay’s Extracting and visualizing tidy draws from brms models vignette (https://mjskay.github.io/tidybayes/articles/tidy-brms.html#point-summaries-and-intervals) for a detailed breakdown. In short, the family of functions use the naming scheme [median|mean|mode]_[qi|hdi]. Here are a few examples.\n\n\nCode\ndraws %&gt;% mean_qi(beta0)                        # mean and 95% percentile interval\n\n\n# A tibble: 1 × 6\n  beta0 .lower .upper .width .point .interval\n  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n1  32.2   25.3   39.1   0.95 mean   qi       \n\n\nCode\ndraws %&gt;% median_qi(beta0, .width = .80)        # median and 80% percentile interval\n\n\n# A tibble: 1 × 6\n  beta0 .lower .upper .width .point .interval\n  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n1  32.3   27.9   36.7    0.8 median qi       \n\n\nCode\ndraws %&gt;% mode_hdi(beta0, .width = c(.5, .95))  # mode, with 95 and 50% HPDI's\n\n\n# A tibble: 2 × 6\n  beta0 .lower .upper .width .point .interval\n  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n1  32.9   29.9   34.4   0.5  mode   hdi      \n2  32.9   25.1   38.8   0.95 mode   hdi      \n\n\nAs an aside, the Mode() function we used a while back was also from tidybayes.\n\n\nSpaghetti plots.\nRemember how we said the draw was something like 4,000 separate equations for our Bayesian model? Let’s see that again.\n\n\nCode\ndraws %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  mutate(body_mass_g = mean(chinstrap$body_mass_g)) %&gt;% \n  # here's the equation\n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  # subset the top 6\n  head()\n\n\n# A tibble: 6 × 5\n  .draw beta0   beta1 body_mass_g y_hat\n  &lt;int&gt; &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1     1  30.6 0.00505       3733.  49.5\n2     2  32.8 0.00437       3733.  49.1\n3     3  35.1 0.00378       3733.  49.2\n4     4  32.8 0.00436       3733.  49.1\n5     5  34.8 0.00384       3733.  49.2\n6     6  34.1 0.00405       3733.  49.2\n\n\nOne way we might emphasize the 4,000 equations is with a spaghetti plot. When we display the fitted line for bill_length_mm over the range of body_mass_g values, we can display a single line for each posterior draw. Here’s what that can look like.\n\n\nCode\nrange(chinstrap$body_mass_g)\n\n\n[1] 2700 4800\n\n\nCode\n# Note: go through this one line at a time\ndraws %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  expand_grid(body_mass_g = range(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  # plot!\n  ggplot(aes(x = body_mass_g, y = y_hat, group = .draw)) +\n  geom_line(linewidth = 1/10, alpha = 1/10)\n\n\n\n\n\n\n\n\n\nIt might be easier to see what’s going on with a random subset of, say, 10 of the posterior draws.\n\n\nCode\nset.seed(10)\n\ndraws %&gt;% \n  # take a random sample of 10 rows\n  slice_sample(n = 10) %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  expand_grid(body_mass_g = range(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = body_mass_g, y = y_hat, group = .draw)) +\n  geom_line(linewidth = 1/2, alpha = 1/2)\n\n\n\n\n\n\n\n\n\nWhile we’re at it, let’s take 20 draws and do a little color coding.\n\n\nCode\nset.seed(20)\n\ndraws %&gt;% \n  # take a random sample of 20 rows\n  slice_sample(n = 20) %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  expand_grid(body_mass_g = range(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = body_mass_g, y = y_hat, group = .draw, color = beta0)) +\n  geom_line() +\n  scale_color_viridis_c(expression(beta[0]~(the~intercept)), end = .9)\n\n\n\n\n\n\n\n\n\nDo you remember how we said \\(\\beta_0\\) and \\(\\beta_1\\) had a strong negative correlation? Notice how the lines computed by lower \\(\\beta_0\\) values also tend to have higher slopes. This will happen all the time with conventional regression models.\n\n\nQuestion 2.5: We have done all this without yet specifying a prior. What do you think is going on?"
  },
  {
    "objectID": "pages/bayes/index.html#questionexercise",
    "href": "pages/bayes/index.html#questionexercise",
    "title": "Bayes and Penguins",
    "section": "Question/Exercise:",
    "text": "Question/Exercise:\nIn the last part, we made a subset of the penguins data called gentoo, which was only the cases for which species == \"Gentoo\". Do that again and refit the Bayesian model to those data. Can you then remake some of the figures in this file with the new version of the model?"
  },
  {
    "objectID": "pages/bayes/index.html#references",
    "href": "pages/bayes/index.html#references",
    "title": "Bayes and Penguins",
    "section": "References",
    "text": "References\nGelman, A., Hill, J., & Vehtari, A. (2020). Regression and other stories. Cambridge University Press. https://doi.org/10.1017/9781139161879\nKruschke, J. K. (2015). Doing Bayesian data analysis: A tutorial with R, JAGS, and Stan. Academic Press. https://sites.google.com/site/doingbayesiandataanalysis/\nMcElreath, R. (2020). Statistical rethinking: A Bayesian course with examples in R and Stan (Second Edition). CRC Press. https://xcelab.net/rm/statistical-rethinking/\nMcElreath, R. (2015). Statistical rethinking: A Bayesian course with examples in R and Stan. CRC press. https://xcelab.net/rm/statistical-rethinking/"
  },
  {
    "objectID": "pages/bayes/index.html#session-information",
    "href": "pages/bayes/index.html#session-information",
    "title": "Bayes and Penguins",
    "section": "Session information",
    "text": "Session information\n\n\nCode\nsessionInfo()\n\n\nR version 4.4.1 (2024-06-14)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] ggdist_3.3.2        broom.mixed_0.2.9.6 broom_1.0.8        \n [4] brms_2.22.0         Rcpp_1.0.13         ggside_0.3.1       \n [7] lubridate_1.9.3     forcats_1.0.0       stringr_1.5.1      \n[10] dplyr_1.1.4         purrr_1.0.2         readr_2.1.5        \n[13] tidyr_1.3.1         tibble_3.2.1        ggplot2_3.5.1      \n[16] tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1     viridisLite_0.4.2    farver_2.1.2        \n [4] loo_2.8.0            fastmap_1.2.0        tensorA_0.36.2.1    \n [7] digest_0.6.36        estimability_1.5.1   timechange_0.3.0    \n[10] lifecycle_1.0.4      StanHeaders_2.32.10  processx_3.8.4      \n[13] magrittr_2.0.3       posterior_1.6.0      compiler_4.4.1      \n[16] rlang_1.1.4          tools_4.4.1          utf8_1.2.4          \n[19] yaml_2.3.10          knitr_1.48           labeling_0.4.3      \n[22] bridgesampling_1.1-2 htmlwidgets_1.6.4    curl_5.2.1          \n[25] pkgbuild_1.4.4       plyr_1.8.9           abind_1.4-8         \n[28] withr_3.0.1          grid_4.4.1           stats4_4.4.1        \n[31] fansi_1.0.6          xtable_1.8-4         colorspace_2.1-1    \n[34] future_1.34.0        inline_0.3.21        emmeans_1.10.7      \n[37] globals_0.16.3       scales_1.3.0         cli_3.6.3           \n[40] mvtnorm_1.3-3        rmarkdown_2.27       generics_0.1.3      \n[43] RcppParallel_5.1.10  reshape2_1.4.4       tzdb_0.4.0          \n[46] rstan_2.32.6         splines_4.4.1        bayesplot_1.11.1    \n[49] parallel_4.4.1       matrixStats_1.5.0    vctrs_0.6.5         \n[52] Matrix_1.7-0         jsonlite_1.8.8       callr_3.7.6         \n[55] hms_1.1.3            listenv_0.9.1        glue_1.8.0          \n[58] parallelly_1.42.0    ps_1.7.7             codetools_0.2-20    \n[61] distributional_0.5.0 stringi_1.8.4        gtable_0.3.5        \n[64] QuickJSR_1.5.1       palmerpenguins_0.1.1 munsell_0.5.1       \n[67] pillar_1.9.0         furrr_0.3.1          htmltools_0.5.8.1   \n[70] Brobdingnag_1.2-9    R6_2.5.1             evaluate_0.24.0     \n[73] lattice_0.22-6       backports_1.5.0      rstantools_2.4.0    \n[76] coda_0.19-4.1        gridExtra_2.3        nlme_3.1-164        \n[79] checkmate_2.3.2      mgcv_1.9-1           xfun_0.52           \n[82] pkgconfig_2.0.3"
  }
]